// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schemas/protos/v1/totp.proto

package protosv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "nnyd-back/pb/schemas/protos/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TotpServiceName is the fully-qualified name of the TotpService service.
	TotpServiceName = "schemas.protos.v1.TotpService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TotpServiceGenerateTotpKeyProcedure is the fully-qualified name of the TotpService's
	// GenerateTotpKey RPC.
	TotpServiceGenerateTotpKeyProcedure = "/schemas.protos.v1.TotpService/GenerateTotpKey"
	// TotpServiceVerifyTotpProcedure is the fully-qualified name of the TotpService's VerifyTotp RPC.
	TotpServiceVerifyTotpProcedure = "/schemas.protos.v1.TotpService/VerifyTotp"
	// TotpServiceValidateTotpProcedure is the fully-qualified name of the TotpService's ValidateTotp
	// RPC.
	TotpServiceValidateTotpProcedure = "/schemas.protos.v1.TotpService/ValidateTotp"
)

// TotpServiceClient is a client for the schemas.protos.v1.TotpService service.
type TotpServiceClient interface {
	GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error)
}

// NewTotpServiceClient constructs a client for the schemas.protos.v1.TotpService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTotpServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TotpServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &totpServiceClient{
		generateTotpKey: connect.NewClient[v1.GenerateTotpKeyRequest, v1.GenerateTotpKeyResponse](
			httpClient,
			baseURL+TotpServiceGenerateTotpKeyProcedure,
			opts...,
		),
		verifyTotp: connect.NewClient[v1.VerifyTotpRequest, v1.VerifyTotpResponse](
			httpClient,
			baseURL+TotpServiceVerifyTotpProcedure,
			opts...,
		),
		validateTotp: connect.NewClient[v1.ValidateTotpRequest, v1.ValidateTotpResponse](
			httpClient,
			baseURL+TotpServiceValidateTotpProcedure,
			opts...,
		),
	}
}

// totpServiceClient implements TotpServiceClient.
type totpServiceClient struct {
	generateTotpKey *connect.Client[v1.GenerateTotpKeyRequest, v1.GenerateTotpKeyResponse]
	verifyTotp      *connect.Client[v1.VerifyTotpRequest, v1.VerifyTotpResponse]
	validateTotp    *connect.Client[v1.ValidateTotpRequest, v1.ValidateTotpResponse]
}

// GenerateTotpKey calls schemas.protos.v1.TotpService.GenerateTotpKey.
func (c *totpServiceClient) GenerateTotpKey(ctx context.Context, req *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error) {
	return c.generateTotpKey.CallUnary(ctx, req)
}

// VerifyTotp calls schemas.protos.v1.TotpService.VerifyTotp.
func (c *totpServiceClient) VerifyTotp(ctx context.Context, req *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return c.verifyTotp.CallUnary(ctx, req)
}

// ValidateTotp calls schemas.protos.v1.TotpService.ValidateTotp.
func (c *totpServiceClient) ValidateTotp(ctx context.Context, req *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error) {
	return c.validateTotp.CallUnary(ctx, req)
}

// TotpServiceHandler is an implementation of the schemas.protos.v1.TotpService service.
type TotpServiceHandler interface {
	GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error)
}

// NewTotpServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTotpServiceHandler(svc TotpServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	totpServiceGenerateTotpKeyHandler := connect.NewUnaryHandler(
		TotpServiceGenerateTotpKeyProcedure,
		svc.GenerateTotpKey,
		opts...,
	)
	totpServiceVerifyTotpHandler := connect.NewUnaryHandler(
		TotpServiceVerifyTotpProcedure,
		svc.VerifyTotp,
		opts...,
	)
	totpServiceValidateTotpHandler := connect.NewUnaryHandler(
		TotpServiceValidateTotpProcedure,
		svc.ValidateTotp,
		opts...,
	)
	return "/schemas.protos.v1.TotpService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TotpServiceGenerateTotpKeyProcedure:
			totpServiceGenerateTotpKeyHandler.ServeHTTP(w, r)
		case TotpServiceVerifyTotpProcedure:
			totpServiceVerifyTotpHandler.ServeHTTP(w, r)
		case TotpServiceValidateTotpProcedure:
			totpServiceValidateTotpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTotpServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTotpServiceHandler struct{}

func (UnimplementedTotpServiceHandler) GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.TotpService.GenerateTotpKey is not implemented"))
}

func (UnimplementedTotpServiceHandler) VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.TotpService.VerifyTotp is not implemented"))
}

func (UnimplementedTotpServiceHandler) ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.TotpService.ValidateTotp is not implemented"))
}
