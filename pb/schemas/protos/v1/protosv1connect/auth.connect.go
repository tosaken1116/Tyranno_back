// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schemas/protos/v1/auth.proto

package protosv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	v1 "nnyd-back/pb/schemas/protos/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "schemas.protos.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceSignInProcedure is the fully-qualified name of the AuthService's SignIn RPC.
	AuthServiceSignInProcedure = "/schemas.protos.v1.AuthService/SignIn"
	// AuthServiceSignOutProcedure is the fully-qualified name of the AuthService's SignOut RPC.
	AuthServiceSignOutProcedure = "/schemas.protos.v1.AuthService/SignOut"
	// AuthServiceGenerateTotpKeyProcedure is the fully-qualified name of the AuthService's
	// GenerateTotpKey RPC.
	AuthServiceGenerateTotpKeyProcedure = "/schemas.protos.v1.AuthService/GenerateTotpKey"
	// AuthServiceVerifyTotpProcedure is the fully-qualified name of the AuthService's VerifyTotp RPC.
	AuthServiceVerifyTotpProcedure = "/schemas.protos.v1.AuthService/VerifyTotp"
	// AuthServiceValidateTotpProcedure is the fully-qualified name of the AuthService's ValidateTotp
	// RPC.
	AuthServiceValidateTotpProcedure = "/schemas.protos.v1.AuthService/ValidateTotp"
)

// AuthServiceClient is a client for the schemas.protos.v1.AuthService service.
type AuthServiceClient interface {
	SignIn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignOutResponse], error)
	GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error)
}

// NewAuthServiceClient constructs a client for the schemas.protos.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signIn: connect.NewClient[emptypb.Empty, v1.SignInResponse](
			httpClient,
			baseURL+AuthServiceSignInProcedure,
			opts...,
		),
		signOut: connect.NewClient[emptypb.Empty, v1.SignOutResponse](
			httpClient,
			baseURL+AuthServiceSignOutProcedure,
			opts...,
		),
		generateTotpKey: connect.NewClient[v1.GenerateTotpKeyRequest, v1.GenerateTotpKeyResponse](
			httpClient,
			baseURL+AuthServiceGenerateTotpKeyProcedure,
			opts...,
		),
		verifyTotp: connect.NewClient[v1.VerifyTotpRequest, v1.VerifyTotpResponse](
			httpClient,
			baseURL+AuthServiceVerifyTotpProcedure,
			opts...,
		),
		validateTotp: connect.NewClient[v1.ValidateTotpRequest, v1.ValidateTotpResponse](
			httpClient,
			baseURL+AuthServiceValidateTotpProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signIn          *connect.Client[emptypb.Empty, v1.SignInResponse]
	signOut         *connect.Client[emptypb.Empty, v1.SignOutResponse]
	generateTotpKey *connect.Client[v1.GenerateTotpKeyRequest, v1.GenerateTotpKeyResponse]
	verifyTotp      *connect.Client[v1.VerifyTotpRequest, v1.VerifyTotpResponse]
	validateTotp    *connect.Client[v1.ValidateTotpRequest, v1.ValidateTotpResponse]
}

// SignIn calls schemas.protos.v1.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignOut calls schemas.protos.v1.AuthService.SignOut.
func (c *authServiceClient) SignOut(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignOutResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// GenerateTotpKey calls schemas.protos.v1.AuthService.GenerateTotpKey.
func (c *authServiceClient) GenerateTotpKey(ctx context.Context, req *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error) {
	return c.generateTotpKey.CallUnary(ctx, req)
}

// VerifyTotp calls schemas.protos.v1.AuthService.VerifyTotp.
func (c *authServiceClient) VerifyTotp(ctx context.Context, req *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return c.verifyTotp.CallUnary(ctx, req)
}

// ValidateTotp calls schemas.protos.v1.AuthService.ValidateTotp.
func (c *authServiceClient) ValidateTotp(ctx context.Context, req *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error) {
	return c.validateTotp.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the schemas.protos.v1.AuthService service.
type AuthServiceHandler interface {
	SignIn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignOutResponse], error)
	GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error)
	VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error)
	ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceSignInHandler := connect.NewUnaryHandler(
		AuthServiceSignInProcedure,
		svc.SignIn,
		opts...,
	)
	authServiceSignOutHandler := connect.NewUnaryHandler(
		AuthServiceSignOutProcedure,
		svc.SignOut,
		opts...,
	)
	authServiceGenerateTotpKeyHandler := connect.NewUnaryHandler(
		AuthServiceGenerateTotpKeyProcedure,
		svc.GenerateTotpKey,
		opts...,
	)
	authServiceVerifyTotpHandler := connect.NewUnaryHandler(
		AuthServiceVerifyTotpProcedure,
		svc.VerifyTotp,
		opts...,
	)
	authServiceValidateTotpHandler := connect.NewUnaryHandler(
		AuthServiceValidateTotpProcedure,
		svc.ValidateTotp,
		opts...,
	)
	return "/schemas.protos.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceSignInProcedure:
			authServiceSignInHandler.ServeHTTP(w, r)
		case AuthServiceSignOutProcedure:
			authServiceSignOutHandler.ServeHTTP(w, r)
		case AuthServiceGenerateTotpKeyProcedure:
			authServiceGenerateTotpKeyHandler.ServeHTTP(w, r)
		case AuthServiceVerifyTotpProcedure:
			authServiceVerifyTotpHandler.ServeHTTP(w, r)
		case AuthServiceValidateTotpProcedure:
			authServiceValidateTotpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignOut(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.SignOutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.AuthService.SignOut is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateTotpKey(context.Context, *connect.Request[v1.GenerateTotpKeyRequest]) (*connect.Response[v1.GenerateTotpKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.AuthService.GenerateTotpKey is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyTotp(context.Context, *connect.Request[v1.VerifyTotpRequest]) (*connect.Response[v1.VerifyTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.AuthService.VerifyTotp is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateTotp(context.Context, *connect.Request[v1.ValidateTotpRequest]) (*connect.Response[v1.ValidateTotpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("schemas.protos.v1.AuthService.ValidateTotp is not implemented"))
}
